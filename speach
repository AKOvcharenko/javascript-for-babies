1. для добавления джаваскрипта на страницу нужно добавить тег скрипт, причем тег можно добавлять в любое место страницы и сколько угодно раз.

2. допустим ситуация: вы работает в pudelek, и однажды владелец думает, что-то как-то ресурс мало людей посещает, такой икарный контент, а денег не приносит, увольняем половину рабочих поляков и нанимаем на аутсорс индусов - они нам подлючат контекстную рекламу, заработаем миллионы! и однажды вас говорят пофиксить баг, вы открываете код и видитн что-то такое

400 тысяч линий кода просто написаны в html документе.

вы думаете вам плохо? представте другую ситуацию, кто-то пришел на работу, и ему друг говорит там новые фото ратаковски в купальниках на пуделке, а он с детцва увлекаетест купальниками - он вообще модельер, проектирует купальники. 

к сожелению, при добавлении этого тега, браузер перестает рендерить документ и начинает исполнять срипт указаный в этом теге.

3. у вас не хватает времени починить и вы попросили рахманада починить - нужно сделать вынести скрипт в отдельный минимизированый и более проищводительный файл, и подключить его на страницу.

завтра вы приходите на работу и вам начальник говорит, ящек проверь пожалуйста там страница белая на полминуты а потом все загружается но реклама не показывается.
после легкой проверки вы видите что страница висит на пендинг реквеста, сервер не возвращает скрипт. и тут вы замечаете что последний раз логинился на сервера не кшишек, а митхундра, а от кшищека осталост только пожегнальное письмо, которое вам упало в спам и лежащин сервера. 

тогда вы поняли что стоит всетаки лучше починить самому и загружать скрипты без блокировки станицы  

4. и видите вы такое: 

вопервых рахманад разбил логику на два скрипта и вынес их в отдельные файлы - молодец,
но при этом у второго скрипта он указал одновременно и срц и код внутри, а при этом содеожимое тега скрипт будет проигнорировано.


5. с помощью атрибутов асинк и дефер можно перевести документ в асинхронный режим рендеринга - тоесть эти скрипты не будут задерживать рендеринг страницы
как они работают:

асинк: 
- скрипт начинает загружаться - документ рендериться
- второй скрипт начинает загружаться - документ рендериться
- один из скриптов загрузился - рендеринг запаузился на время исолнения скрипта - по окончанию скрипта документ рендерится
- второй скрипт загрузился - рендеринг паузится на время исполнения скрипта - по окончанию документ рендериться 
- исполнение скриптов произойдет в том порядке в котором они загрузились, что не гарантирует нам последовательности указаной в html

defer: 
- скрипты будуь загружаться без блокировки рендеринга страницы, но отработают на ивент который называется DOMContentLoaded.
- в том порядке в котором они написаны в html

тоесть допустим в нашем случае, первый скрипт добавляет на страницу рекламу, а второй скрипт добавляет аналитику сколько раз юзеры взаимодействовали с рекламой.
скрипт два должен использоваться после исполнения скрипта 1. в этом конкретном случае лучше использовать атрибуты дефер для обоих скриптов.

6. отлично мы пофиксили эту проблему, может стоит сделать ревью кода?

смотрю а там написано что-то такое.

 в разных линиях использованы разные ключевые слова для инициализации переменных, вне зависимости от того действительно это переменные или это постоянные.
а ы чем разница между var let const ?



7. var let const разница в hoinsting и block-level доступности этих переменных
что такое hoisting javaScript исполняет скрипты в два захода

- сначала он читает код, поднимая все переменные(которые могут быть подняты), а потом исполняет

поэтому такой код будет интепритирован в такой код;

переменная определенная с помощью зарезервированого слова вар будет поднята, причем будет видна вне зависимости от блока в котором она определена(будет доступна на любом уровне функции/цикла/ифа в котором она определена)

переменная определенная с помощью зарезервированого слова  let, не всплывает - тоесть вы не можете обратиться к ней до момента определения.
в дополнение к тому такая переменная будет блоковая - тоесть доступна только внутри блока в котором она определена + эта переменная может иметь разные значения в разных блоках!
вы не можете определять переменную с таким же именем с помощью слова let в этом случае будет ошибка Identifier 'name' has already been declared 

переменные определенные с помощью cont ведут себя точно так же как и переменные let, но при этом 


15. написания var let const очень важная вещь, потому что если пропустить это слово иногда это может полностью поломать логику скрипта и привести к трудно отлавливаемым багам
например вот тут
 

мы имеем два модуля которые нам склеял вебпак в один скрипт, и в первом модуле нехороший человек упустил var/const. во втором модуле появляется который должен установить имя блажей к сожелению будет имя збигнев.


17 .смотрю я на названия его переменных и начинаю плакать, но слава богу что джаваскрипт имеет хотя бы какието ограничения на названия переменных


 

 

















 
